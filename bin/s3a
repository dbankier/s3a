#!/usr/bin/env node
const prog = require('caporal')
const path = require('path');
const parser = require('../lib/parser');
const analyser = require('../lib/analyser');
const moment = require('moment');

prog.version('1.0.0')
  .argument('<path>', 'Path to rcloned s3 logs')
  .argument('<property>', 'Property to rollup', /userId|bucket|time|remoteIP|requester|requesterID|operation|key|requestURI|status|errorCode|bytesSent|objectSize|totalTime|turnAroundTime|referer|userAgent|versionID|country|region|city/, 'key')
  .option('--keyFilter <filter>', 'Filter by the key/file results by regular expression')
  .option('--operationFilter <filter>', 'Filter by the operation, e.g. WEBSITE.GET.OBJECT, by regular expression')
  .option('--top <top>', 'Only show the <top> results')
  .option('--start <start>', 'start date: DD/MM/YYYY')
  .option('--end <end>', 'end date: DD/MM/YYYY')
  .option('--last7days', 'restrict to the last 7 days')
  .option('--unique', 'only count one request per unique remoteIP - for counting unique users')
  .option('--colors', 'output with colors')
  .action(function(args, options, logger) {
    const target = path.resolve(args.path);
    logger.debug("Parsing...")
    if (options.last7days) {
      options.start = new moment().subtract(7, 'days').format("DD/MM/YYYY");
      options.end = new moment().format("DD/MM/YYYY");
    }
    parser(target)
      .then(content => {
        logger.debug("Analysing...")
        return analyser.analyse({
          content,
          keyFilter: options.keyFilter,
          operationFilter: options.operationFilter,
          start: options.start,
          end: options.end,
          property: args.property,
          unique: options.unique
        })
      })
      .then(data => console.log(analyser.format({
        data,
        top: options.top ,
        colors: options.colors
      })))
      .catch(err => console.err(err))
  });

prog.parse(process.argv)

